AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: This template launches dummy web application
Parameters:
  ImageId:
    Description: AMI ID used in web application
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  PolicyTargetValue:
    Description: Scaling policy target value
    Type: String
  WebappCertificate:
    Description: Certificate for Load Balancer
    Type: AWS::SSM::Parameter::Value<String>
    Default: webappCertificate
Resources:
  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebAppSecurityGroup
      GroupDescription: Web application security group
      VpcId: 
        Fn::ImportValue: PrimaryVpcId
      SecurityGroupIngress:
      # - IpProtocol: tcp # Uncomment this if you want to reach the instances via ssh from bastions
      #   Description: ssh
      #   FromPort: 22
      #   ToPort: 22
      #   SourceSecurityGroupId: 
      #     Fn::ImportValue: BastionSecurityGroupId
        - IpProtocol: tcp
          Description: http from vpc CidrIp 
          FromPort: 80
          ToPort: 80
          CidrIp: 
            Fn::ImportValue: IpSpace
      SecurityGroupEgress:
        - IpProtocol: tcp
          Description: http to s3
          FromPort: 80
          ToPort: 80
          DestinationPrefixListId:
            Fn::ImportValue: S3PrefixList
        - IpProtocol: tcp
          Description: https to IpSpace
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  ElbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ElbSecurityGroup
      GroupDescription: ELB security group
      VpcId: 
        Fn::ImportValue: PrimaryVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: https world 
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  ScalePolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: 
        Ref: WebAppAutoscalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 
          Ref: PolicyTargetValue
  WebAppAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
        PauseTime: PT6M
        WaitOnResourceSignals: true
    CreationPolicy:
      ResourceSignal:    
        Count: 2
        Timeout: PT6M
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: PrivateSubnetAZAId 
        - Fn::ImportValue: PrivateSubnetAZBId 
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: '2'
      MaxSize: '4'
      DesiredCapacity: '2'
      LoadBalancerNames:
        - Ref: ElasticLoadBalancer
      Tags:
        - Key: Service
          Value: WebApp
          PropagateAtLaunch: true
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Ref: ElbSecurityGroup 
      Subnets:
        - Fn::ImportValue: PublicSubnetAZAId 
        - Fn::ImportValue: PublicSubnetAZBId
      Listeners:
        - LoadBalancerPort: '443'
          InstancePort: '80'
          Protocol: HTTPS
          InstanceProtocol: HTTP
          SSLCertificateId:
            Ref: WebappCertificate
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '2'
        UnhealthyThreshold: '2'
        Interval: '30' 
        Timeout: '5'
  WebAppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - Fn::Join:
            - ":"
            - - "arn"
              - Ref: "AWS::Partition"
              - "iam::aws:policy/CloudWatchAgentAdminPolicy"
      Policies:
        - PolicyName: SessionManagerPolicyForWebapp
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:CreateControlChannel
                Resource: "*"
              - Effect: Allow
                Action: ssm:UpdateInstanceInformation
                Resource: "*"
                Condition:
                  StringEquals:
                    aws:ResourceTag/Service: WebApp
  WebAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: WebAppInstanceProfile
      Path: /
      Roles: 
        - Ref: WebAppRole
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setup_cfn_hup
            - 02_set_amazon_cloudwatch_agent
            - 03_restart_amazon_cloudwatch_agent
            - 04_last_update
          update:
            - 02_set_amazon_cloudwatch_agent
            - 03_restart_amazon_cloudwatch_agent
            - 04_last_update
        01_setup_cfn_hup:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: 
                Fn::Sub: |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
                  interval=1
              mode: '000400'
              owner: root
            "/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf":
              content: 
                Fn::Sub: |
                  [cfn-auto-reloader-hook]
                  triggers=post.update,post.add,post.remove
                  path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LaunchConfig --region ${AWS::Region} --configsets update
                  runas=root
              mode: '000400'
              owner: root
              group: root
            "/lib/systemd/system/cfn-hup.service":
              content: |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: |
                systemctl start cfn-hup.service
        02_set_amazon_cloudwatch_agent:
          files:
            "/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json":
              content:
                {
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${aws:AutoScalingGroupName}",
                      "ImageId": "${aws:ImageId}",
                      "InstanceId": "${aws:InstanceId}",
                      "InstanceType": "${aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      },
                      "swap": {
                        "measurement": [
                          "swap_used_percent"
                        ]
                      }
                    }
                  }
                }
        03_restart_amazon_cloudwatch_agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        04_last_update:
          commands:
            01_write_data:
              command: date >> /var/log/date.log 
    Properties:
      ImageId:
        Ref: ImageId 
      InstanceType: t2.micro
      SecurityGroups:
        - Ref: WebAppSecurityGroup
      IamInstanceProfile:
        Ref: WebAppInstanceProfile
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -x
            # redirects the user-data output
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

            CFN_SIGNAL="/opt/aws/bin/cfn-signal"

            # error exit
            function error_exit {
                /opt/aws/bin/cfn-signal $CFN_PROXY -e 1 --stack ${AWS::StackName} --resource WebAppAutoscalingGroup --region ${AWS::Region}
                exit 1
            }

            # install and configure httpd 
            yum update -y
            yum install httpd -y
            service httpd start
            chkconfig httpd on
            cd /var/www/html
            echo "<html><h1>This is alpha project page</h1></html>" > index.html

            # install cloudwatch unified agent
            rpm -Uvh https://s3.${AWS::Region}.amazonaws.com/amazoncloudwatch-agent-${AWS::Region}/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm || error_exit
             
            # call Cloudformation init
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LaunchConfig --region ${AWS::Region} || error_exit

            # send everything ok signal
            $CFN_SIGNAL -e 0 --stack ${AWS::StackName} --resource WebAppAutoscalingGroup --region ${AWS::Region}
